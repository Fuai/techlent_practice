{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5172d357-3430-4950-980a-ab5de2a7f2e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, jsonify, request, render_template\n",
    "import json\n",
    "import numpy as np\n",
    "import pickle\n",
    "\n",
    "# Load the trained model\n",
    "with open(\"model.pkl\", \"rb\") as f:\n",
    "    model = pickle.load(f)\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/', methods=[\"GET\", \"POST\"])\n",
    "def index():\n",
    "    pred = \"\"\n",
    "    if request.method == \"POST\":\n",
    "        # Extract features from the form\n",
    "        BeneID = request.form[\"BeneID\"]\n",
    "        ClaimID = request.form[\"ClaimID\"]\n",
    "        InscClaimAmtReimbursed = request.form[\"InscClaimAmtReimbursed\"]\n",
    "        DeductibleAmtPaid = request.form[\"DeductibleAmtPaid\"]\n",
    "        RenalDiseaseIndicator = request.form[\"RenalDiseaseIndicator\"]\n",
    "        ChronicCond_Alzheimer = request.form[\"ChronicCond_Alzheimer\"]\n",
    "        ChronicCond_Heartfailure = request.form[\"ChronicCond_Heartfailure\"]\n",
    "        ChronicCond_KidneyDisease = request.form[\"ChronicCond_KidneyDisease\"]\n",
    "        ChronicCond_Cancer = request.form[\"ChronicCond_Cancer\"]\n",
    "        ChronicCond_ObstrPulmonary = request.form[\"ChronicCond_ObstrPulmonary\"]\n",
    "        ChronicCond_Depression = request.form[\"ChronicCond_Depression\"]\n",
    "        ChronicCond_Diabetes = request.form[\"ChronicCond_Diabetes\"]\n",
    "        ChronicCond_IschemicHeart = request.form[\"ChronicCond_IschemicHeart\"]\n",
    "        ChronicCond_Osteoporasis = request.form[\"ChronicCond_Osteoporasis\"]\n",
    "        ChronicCond_rheumatoidarthritis = request.form[\"ChronicCond_rheumatoidarthritis\"]\n",
    "        ChronicCond_stroke = request.form[\"ChronicCond_stroke\"]\n",
    "        AdmissionDays = request.form[\"AdmissionDays\"]\n",
    "        ClaimDays = request.form[\"ClaimDays\"]\n",
    "        is_dead = request.form[\"is_dead\"]\n",
    "        Num_UniqueClmDiagnosis = request.form[\"Num_UniqueClmDiagnosis\"]\n",
    "        Num_UniqueProcedureCode = request.form[\"Num_UniqueProcedureCode\"]\n",
    "        NumPhysicians = request.form[\"NumPhysicians\"]\n",
    "        NoOfMonths_PartACov = request.form[\"NoOfMonths_PartACov\"]\n",
    "        NoOfMonths_PartBCov = request.form[\"NoOfMonths_PartBCov\"]\n",
    "        IPAnnualReimbursementAmt = request.form[\"IPAnnualReimbursementAmt\"]\n",
    "        IPAnnualDeductibleAmt = request.form[\"IPAnnualDeductibleAmt\"]\n",
    "        OPAnnualReimbursementAmt = request.form[\"OPAnnualReimbursementAmt\"]\n",
    "        OPAnnualDeductibleAmt = request.form[\"OPAnnualDeductibleAmt\"]\n",
    "        Age = request.form[\"Age\"]\n",
    "\n",
    "        # Prepare the input data for the model\n",
    "        X = np.array([[\n",
    "            float(InscClaimAmtReimbursed),\n",
    "            float(DeductibleAmtPaid),\n",
    "            int(RenalDiseaseIndicator),\n",
    "            int(ChronicCond_Alzheimer),\n",
    "            int(ChronicCond_Heartfailure),\n",
    "            int(ChronicCond_KidneyDisease),\n",
    "            int(ChronicCond_Cancer),\n",
    "            int(ChronicCond_ObstrPulmonary),\n",
    "            int(ChronicCond_Depression),\n",
    "            int(ChronicCond_Diabetes),\n",
    "            int(ChronicCond_IschemicHeart),\n",
    "            int(ChronicCond_Osteoporasis),\n",
    "            int(ChronicCond_rheumatoidarthritis),\n",
    "            int(ChronicCond_stroke),\n",
    "            int(AdmissionDays),\n",
    "            int(ClaimDays),\n",
    "            int(is_dead),\n",
    "            int(Num_UniqueClmDiagnosis),\n",
    "            int(Num_UniqueProcedureCode),\n",
    "            int(NumPhysicians),\n",
    "            int(NoOfMonths_PartACov),\n",
    "            int(NoOfMonths_PartBCov),\n",
    "            float(IPAnnualReimbursementAmt),\n",
    "            float(IPAnnualDeductibleAmt),\n",
    "            float(OPAnnualReimbursementAmt),\n",
    "            float(OPAnnualDeductibleAmt),\n",
    "            int(Age)\n",
    "        ]])\n",
    "        \n",
    "        # Make a prediction\n",
    "        pred = model.predict_proba(X)[0][1]\n",
    "    \n",
    "    return render_template(\"index.html\", pred=pred)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run(debug=True, host='127.0.0.1', port=5000)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
